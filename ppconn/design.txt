【P2P数据请求模块（TCP）】

最多三个回合，被动推送。
不借助于公共服务器打洞协调（但须stun服务器侦测自身NAT类型）。


数据询问
========
对于自身没有的数据，可通过P2P网络对外进行询问。
询问包含3个阶段：
	1. 询问/转播
	2. 回馈/传递
	3. 确认/传递
转播与回馈由端点检查自身有无目标数据来体现。有则回馈，否则转播询问（如果TTL非零）。


询问
----
询问包结构：
	- 目标数据的标识（1 + Name:ID或哈希）
	- 自身NAT/IP类型：1字节。开放型/完全圆锥|受限圆锥|端口受限圆锥|对称NAT；IPv4|IPv6
	- 自身地址（IP:Port）。4～16字节 + 2字节
	- 时间戳。4字节微秒数（可支持71分钟轮回，辅助用于转播评估）
	- 转发跳数（TTL）。1字节，分为前后2段。
	  1. [4] 前4位为跳数累计，转发过程中逐跳加1（实际跳数，用户无法作假，可用于续转评估）。
	  2. [4] 后4位设置当前剩余跳数，转发过程中逐跳减1（用户期望值）。
	  注：
	  即最多支持16跳（0-15）。抵达端点数已足够大（约8的16次方）。

数据标识：
	首字节为标识类型，分2级。
	前4位为大分类，后4位为对应分类的小分类或属性。各支持15个类别。全0值特殊含义。
	大分类：
	1. 指令字。
	   后续2字节指定具体指令值。如：HOSTS指令, 获取连接池主机信息。
	2. 键值对。
	   后续12字节包含两个部分：名称[8]与值ID[4]。如：BLOCK:2245 获取高度为2245的区块数据。
	   注：名称的8字节可能包含更细的规划。
	3. 哈希标识。
	   低4位定义哈希算法：
	   - MD5,    长16字节
	   - SHA1,   长20字节
	   - SHA224, 长28字节
	   - SHA256, 长32字节
	   - SHA384, 长48字节
	   - SHA512, 长64字节
	   后续字节序列为对应哈希算法计算的哈希值（已知长度）。
	4. 变长序列。
	   低4位定义变长序列的内部分类。
	   标识首个字节定义变长序列的长度（上限255）


转播|回馈
---------
直连端点如果有目标数据，则直接返回目标数据，不再转播。
没有目标数据的中间端点转播询问。
注：
如果询问源为对称NAT型而自身也相同，则仅转播或结束，不必检查自己有无数据。
转发包结构：
	- 询问数据包（或上级转发包）
	- 来源主机标识（4字节）：
	  1. 连接池标识。2字节，连接池更新轮计数（全部更新后为一轮）
	  2. 主机索引。2字节，主机地址在连接池中的索引
	注：每一层来源主机的标识串接后，形成一个转发层级链。

注记：
转发链不采用IP和端口数据，这是有意的，虽然逻辑上更直观。
理由如下：
	- 更小的数据包，且回避了IPv4和IPv6的差别。
	- 更好的隐私性和安全性（避免IP被利用）。
	- 更好的包容性（如果中转端点能够确认来源主机，则连接可以是不同的）。
	- 约束信息中转仅限于已连接者（P2P逻辑）。
	
二级以上（非直连）端点操作：
	1. 检查是否存在目标数据，若存在：
	   - 如果询问源为开放型，直连传递回馈信息（简单结构）。
	   - 否则构造回馈信息包原路回传。
	2. 若没有目标数据：
	   - 转发跳数（高4位）加1。
	   - 转发跳数（低4位）减1。
	   - 构造转发包转播。

回馈信息包：
	- 目标数据标识（同询问源）
	- 源端地址（同询问源）
	- 自身地址（或开放数据源的地址）
	- 自身NAT类型：开放型/完全圆锥，受限圆锥，端口受限圆锥，对称NAT
	  注：如果提供开放源地址，则设置为开放型。
	- 转发链：即原转发数据包里的来源主机序列克隆
	- 回传跳数：1/2字节，初始值为询问包内转发跳数高4位值。
	- 上级指针：1/2字节，指示来源端标识的位置。从0开始，递减计数（0, -1, -2...）
	  0值适用信息包初始构造者（来源已知）。
	  -1表示末尾最后一项（4字节单元），依此类推。

回馈信息包（简化）：
	- 目标数据标识（同询问源）
	- 自身地址（或开放数据源的地址）
	- 自身NAT类型：开放型/完全圆锥，受限圆锥，端口受限圆锥，对称NAT
	注：仅用于直连回馈。

回传过程中（信息包构造者除外），每跳：
	1. 检查回传跳数，0值表示已回到询问源。结束。
	2. 回传跳数减1，上级指针减1。
	3. 从上级指针指示位置提取来源主机标识（连接池标识和主机索引）。
	   检查连接池标识，若与当前值不同则表示连接池已完全更新，原上级主机连接丢失。结束。
	4. 更新原来源主机标识为回传来源主机标识。回传。
	注：
	连接池实现需要保证每轮更新内的主机索引唯一。


确认/传递
---------
询问端收到回馈信息包后，若尚未获得有效数据：
	1. 如果数据源为开放型，直连请求数据。
	2. 否则构造确认信息包，按路径链传递确认信息。
确认信息包：
	- 请求源地址（即本端IP:Port）
	- 请求类型（打洞|连接）
	  如果自身是对称NAT型，则为请求打洞。否则为请求连接。
	- 数据源地址（IP:Port）
	- 传递计数：回馈信息包里上级指针的绝对值
	- 路径链：回馈信息包里转发链的逆序。
	注：
	1. 如果为请求连接，则发送确认包后即对目标打洞（TCP：1-2次），然后监听。
	2. 如果为请求打洞，则发送确认包后，不断尝试发起连接（如间隔3秒，持续2分钟）。

确认信息包传递：
	1. 检查传递计数，如果为0则已达终点。检查请求类型并执行相应操作。
	2. 提取并剥离路径链最后一条记录，获取传递目标主机地址。
	3. 传递计数减1。
	4. 传递新的确认信息包（已剥除本层路径信息）。


TTL值
-----
	为避免造成DDOS，询问数据包转发跳数上限通常为2-3，即3-4跳（0-2/3）。
	是否有效，与数据在网络中的冗余度（或热度）有关。

	该值由询问端设置，通常以较小的值开始尝试（如1或0）。如果数据较冷门，可能需要逐渐提高多次尝试。
	收到询问的客户端通常会按规定转播，但它也可能查看询问包里的时间戳，评估网络延迟情况后决定是否转播。
	警告！
	越高的初始值会导致越多的回复，因此可能导致对自身的DDOS。

	参考：
	假设连接数为8（各级同此），则不同跳数后可以覆盖的端点数：
	- 第1跳最多8个回馈：8^1 => 8
	- 第2跳为：8^2 => 64；
	- 第3跳为：8^3 => 512，第4跳 8^4 => 4096 ....
	- 第10跳： 8^10 => 10亿+ （连网存在重叠端，故实际远低于此）

小结
----
- 询问最多3次往返，类似TCP的3次握手。
- 最终的数据请求由询问者发起，数据提供者仅回传必要的信息（回馈信息包）。
- 数据获取可能通过RPC调用，也由询问者发起。

