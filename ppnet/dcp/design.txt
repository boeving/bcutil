数据报控制协议 DCP（Datagram Control Protocol）
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
基于UDP实现一个「完整数据」传送的逻辑，因此类似于文件，有边界。
主要用于P2P的数据传输。

在下面，完整的数据称为「数据体」，被分解传输的分片数据称为分组或数据报。
注：视数据大小也可能无需分解。


目标
====
1. 任意尺寸数据体。
   分组并行发送（多路复用）。
   一个数据体对应用而言是一个字节流。但支持多个数据体并行送达。
2. 送达可靠性。
   保证数据报送达，提供简单基础的数据可靠性。
   通常，如果数据敏感或包含隐私，应用应采取更强的安全措施（如哈希校验/加密）。
3. 重发/拥塞控制。
   轻启动，预发送，乱序间距回馈，速率自适应，ACK滞速控制。
   与TCP借助于准确的ACK回馈不同，此借助于预发送的多包间距回馈获知数据传输状况，
   和接收端的滞速要求（注：没有窗口逻辑）。
   发送方的丢包判断依据「确认距离」（注：无超时设计），辅以接收端的主动重发请求，
   解决小数据体的末尾依据问题，以及并行优化。
   注：
   接收端有超时设计但时长极短（前2个包间距的2～3倍）。


基本逻辑
========
1. 顺序并发。
   不同的数据体按请求的先后顺序连续发送，无需等待确认。
   总的发送速率受接收端的ACK滞速控制。
   每个数据体内部分组的丢包重发由确认距离和接收端主动请求控制，对总速率实施间接影响。
2. 乱序接收。
   网络传输无法保证数据报原始的顺序是一个天然特征，因此我们以乱序为设计前提。
   当然，发送是有严格的顺序的。
3. 乱序确认。
   按适当的节奏确认抵达的数据报，基本保持接收时的乱序。
   从「发送距离」中我们可以评估确认是否送达（ACK丢失），如果必要重新发送确认。
4. 有序重发。
   权衡确认距离因子计算重发，序列号顺序依然决定优先性。
   除非收到接收端的主动重发请求，它有最高的优先性。

小结：
发送方是有序的，接收端是无序的。


数据结构
========
	0				15				31
	+-------------------------------+-------------------------------+
	|	    数据ID-SND		|	      序列号		|  // 4字节，发送方设置
	+-------------------------------+-------------------------------+
	|	    数据ID-RCV		|	      确认号		|  // 4字节，接收端设置
	+-------------------------------+-------------------------------+
	| 扩展	| MTU通	|.|S|R|B|R|R|B|E|  		|		|  // 4字节
	| 重组	| 告/确	|.|E|S|Y|T|P|E|N|   确认距离	|   发送距离	|  // 共
	| (4)	| 认(4)	|.|S|T|E|P|Z|G|D|		|		|  // 32 bits
	+-------------------------------+-------------------------------+
	|			    会话校验码				|  // 4字节，CRC32校验
	+---------------------------------------------------------------+
	|			    MTU 自定义				|  // 4字节，可选
	+---------------------------------------------------------------+

	长度：16 + 4 可选
	端口：UDP报头指定（4）

说明
----
	-----------------------------------------------------------------------
	发送方
	------
	(2) 数据ID-SND。
		对一个完整数据的标识。
		类似于一个文件描述符，返回给应用层用于标记数据。
		多个数据传输并行工作，类似多文件请求。
	(2) 序列号。
		以分组的数据报为单位，而非字节数。
		初始发送时起始值随机，随后的分组按顺序递增，超值回绕。
		与数据ID一起工作。
		注：0xffff 为特殊值不用。
	-----------------------------------------------------------------------
	接收端
	------
	(2) 数据ID-RCV。
		含义同上，为对发送方数据的确认，值为其数据ID-SND。
		它与同一个数据报里的「数据ID-SND」没有关系，只与接收到的数据报相关。
	(2) 确认号。
		完整进度需要的下一个序列号（即传统的ACK含义）。
		接收端通常并不会立即返回确认。
		通过返回ACK的时间控制，接收端可以影响发送端的速率。
		注：0xffff 表示单纯的发送，无数据可确认。
	-----------------------------------------------------------------------
	[4] 重组扩展-包数量。
		重发时对非满载包的重新组合，仅限于同一个数据体的连续分组。
		通常用于交互式通信场景。
		默认值0，表示无重组发生，1表示添加了一个包（共2个包组合）。
		最大值15支持共16个包重组。
	[4] MTU 通告/确认。
		告诉对端自己可以发送的最大包尺寸。
		确认时可设置更小的类型，以声明自己的处理能力（MTU，MSS 二合一）。
		确认仅在对方设置非零值时产生，回应零值表示忽略（维持原值）。
		注：4位空间可支持14种标准通路，值15特殊用途。
		0) 协商保持。
			保持之前协商的数据报大小。默认状态。
		1) 基础值。也为初始轻启动的值。
			576 （x-44 = 532/IPv4，x-64 = 512/IPv6）
			1280（x-64 = 1216/IPv6）
		2) 常用以太网通路。
			1500（x-44 = 1456/IPv4，x-64 = 1436/IPv6）
		3) PPPoE链路。
			1492（x-44 = 1448/IPv4，x-64 = 1428/IPv6）
		15) 超标指示。
			由头部后4字节指定大小，常用于超高速网络。
		注记：
		- MTU测试实现为一个独立的服务，每隔一段时间（10～20分钟）重复执行。
		  外部简单调用取值即可。
		- 对于超高速网络，通常传输能力已知，无需测试，仅简单协商。
		- 一次单向通告产生往返2个数据报，双向则有4个，无法合并。
		  通告通常仅在初始联系或MTU发生变化时才产生。
	[8] 标志位。
		双方可设置
		----------
		6] SES	会话创建/更新（Session）。
			这是一个安全性机制，在对端初次请求连系时或一定时间间隔后发生。
			初次连系时的会话创建由接收请求的一方设置。
			不定时的会话更新请求可由任一端发起，包含「更新请求/确认/通告」3个步骤。
			原则上，会话更新包不携带数据（可能更快送达）。
		5] RST 	状态重置（Reset）。
			通知对方重置发送，如果SES同时置位，则同时也清除会话。
			如果未携带合法的会话校验码，则有较低的优先级，否则立即重置。
			这可能是在接收端当机重启后，丢失前阶的会话和数据标识时发生。
			注：
			- 缺失会话校验码的重置请求这可能是一个攻击。
			- 如果依然继续接收到对方合法的数据发送或确认，则忽略该请求。
		4] BYE	主动断开（Bye!）。
			友好地，双方可以主动说再见，以通知对方自己离开了，请自行善后。
			源于保活机制的存在，这一消息无需等待对方确认。
			注：可以连发两个Bye消息^,^。
		接收端设置
		----------
		3] RTP	请求重传（Retransmit Packet）。
			请求对端发送某个具体的包。
			确认号即为请求的目标数据包的序列号。
			这通常在END包已收到但中间包缺失的情况下有用。它可以帮助迅速完成该数据体，从而有利于应用的并行处理。
			或者在单独的小数据体传输中，因发送方无法获得足够的确认距离评估重发，由接收端超时后申请。
			注：
			- 未接收到END包即说明还有数据待发送。
			- 接收端的超时通常很短：前2个包间隔的2-3倍（最短10-15ms）。
			- 将重传主动权交给接收端似乎很合理：没收到就说一声嘛，你的ACK肯定是弄丢了^9^...
		发送方设置
		----------
		2] RPZ 	重新组包（Repacketization）。
			如果对已发送的包进行了重组，设置此标记。
			它对应重组扩展区的设置：如果该区数值为0，标记被简单忽略。
		1] BEG  分组开始（Begin）。
			标记数据体的第一个分组数据报。
		0] END  分组结束（End）。
			标记数据体的最后一个数据报，即分组结束。
			如果数据包较小而无需分组，则BEG和END会被同时设置。
	(1) 确认距离。
		接收端设置。
		当前收到的分组与进度线的距离。如：1表示跳了1个包。
		理想情况下该值为0，但如果接收到多个跳跃包，则可能发送方丢包了。
		注：
		进度线指连续无间隔的确认号的最新位置，即传统的积累ACK确认。
	(1) 发送距离。
		发送方设置。
		当前发送的分组序列号与进度线的距离。
		此也为发送方对接收端的进度通报，即对方发送的ACK已收到（对ACK确认的确认）。
		该值能表达ACK丢失状况。
	-----------------------------------------------------------------------
	(4) 会话校验码。
		用于两个端点的当前连系认证和数据校验。
		应用初始申请一个会话时，对端发送一个8字节随机值作为验证前缀。
		该验证前缀由双方保存，不再在网络上传输。
		之后的数据传输用一个固定的方式计算CRC32校验和，算法：
		CRC32(
			验证前缀 +
			数据ID-SND + 序列号 +
			数据ID-RCV + 确认号 +
			发送距离 + 确认距离 +
			数据
		)
		每一次的该值都会不一样，它既是对数据的校验，也是会话安全的认证。
		纯ACK确认时数据为空，但其它字段依然提供了可变性。
		注：
		这仅提供了简单的安全保护，主要用于防范基于网络性能的攻击。
		对于重要的数据，应用应当自行设计强化的安全措施。
	-----------------------------------------------------------------------


概念
====
与UDP相同，本协议中没有连接的概念，端点可以向任意目标端直接发送数据。一对已经穿透NAT并保持通信状态的端点称为一个「连系」。
就像TCP建立连接的握手，建立一个连系需要打个招呼。它是一次Hello和一次会话确认，会话确认初始化验证数据，为接下来的通信提供安全保障。
因为NAT的原因，连系有保活的概念，但无「断开」的必要。不活了也就断开了。


轻启动
------
	起始数据报大小取固定最小值，然后依MTU通告/确认进行调整。
	起始的数据发送速率也较慢，之后根据距离回馈评估进行自适应。
	初始数据报大小：576 bytes
	初始发送速率：  5 ms/packet
	注：
	由确认距离和己方的发送速度可评估网络状况。




API支持
=======
1.
缺失的分组可能可以忽略（如视频），因此支持跳过缺失的确认。
伪代码：
	// 忽略当前缺失的分组，跳至最接近的后段分组。
	// 返回跳过的分组数。
	func Ignore() int

	// 返回进度线与最近后段分组的距离。
	func Space() int
