报头结构
========

0                              15                              31
+-------------------------------+-------------------------------+
|          Data ID #SND         |        Sequence number        |  // 4字节，发送方设置
+-------------------------------+-------------------------------+
|          Data ID #RCV         |     Acknowledgment number     |  // 4字节，接收端设置
+-------------------------------+-------------------------------+
| RPZ-  | MTU-  |.|R|S|R|B|R|B|E|               |               |  // 4字节
| Extra | ANN/  |.|E|E|S|Y|T|E|N|  ACK distance | Send distance |  // 共
| Size  | ACK   |.|Q|S|T|E|P|G|D|               |               |  // 32 bits
+-------------------------------+-------------------------------+
|                      Session verify code                      |  // 4字节，CRC32校验
+---------------------------------------------------------------+
|                        MTU Custom size                        |  // 4字节，可选
+---------------------------------------------------------------+

注：
    长度：16 + 4 可选
    端口：UDP报头指定（4）



字段说明
========

-----------------------------------------------------------------------
发送方
------
(2) 数据ID #SND。
	一个数据体的当前唯一标识。
	在一个交互期中，最初的那个数据体的ID是随机的，之后的数据体ID顺序编号。
	编号容量为16位（64k），编号会回绕，因此在传数据的容量是有限的，但已足够大。
	注：
	现实的情况下，很难容许一个端点在同一条线路上同时传输6万多个数据体。
	而且这些数据体可以是任意大小的（非指分组数据报）。

(2) 序列号（Sequence number）。
	以分组的数据报为单位计数（而非字节数）。
	数据报的大小与MTU有关，因此实际传输的数据量可能会很大。2字节足以表达。
	每个数据体的初始序列号随机，之后的分组按顺序递增，超值回绕。

	序列号与数据ID一起以标识具体的数据的特定数据报。
-----------------------------------------------------------------------
接收端
------
(2) 数据ID #RCV。
	含义同上，为对发送方数据的确认，值为其数据ID-SND。
	它与同一个数据报里的「数据ID-SND」没有关系，只与接收到的数据报相关。

(2) 确认号（Acknowledgment number）。
	数据体传输进度需要的下一个序列号（类似TCP中积累ACK的含义）。
	接收端通常并不会立即返回确认。
	通过返回ACK的时间控制，接收端可以影响发送端的速率。
-----------------------------------------------------------------------
[4] 扩展重组-包数量（RPZ-ExtraSize）。
	重发时对非满载包的重新组合，仅限于同一个数据体的连续分组。
	通常用于交互式通信场景。
	默认值0，表示无重组发生，1表示添加了一个包（共2个包组合）。
	最大值15支持共16个包重组。

[4] MTU 通告/确认（MTU-ANN/ACK）。
	告诉对端自己可以发送的最大包尺寸。
	确认时可设置更小的类型，以声明自己的处理能力（MTU，MSS 二合一）。
	确认仅在对方设置非零值时产生，回应零值表示忽略（维持原值）。
	注：4位空间可支持14种标准通路，值15特殊用途。
	0) 协商保持。
	   保持之前协商的数据报大小。默认状态。
	1) 基础值。也为初始轻启动的值。
	   576 （x-44 = 532/IPv4，x-64 = 512/IPv6）
	2) 基础值2。IPv6默认包大小。
	   1280（x-64 = 1216/IPv6）
	3) PPPoE链路。
	   1492（x-44 = 1448/IPv4，x-64 = 1428/IPv6）
	4) 常用以太网通路。
	   1500（x-44 = 1456/IPv4，x-64 = 1436/IPv6）
	15) 超标指示。
		由头部后4字节指定大小，常用于超高速网络。
	注记：
	- MTU测试实现为一个独立的服务，每隔一段时间（10～20分钟）重复执行。
	  外部简单调用取值即可。
	- 对于超高速网络，通常传输能力已知，无需测试，仅简单协商。
	- 一次单向通告产生往返2个数据报，双向则有4个，无法合并。
	  通告通常仅在初始联系或MTU发生变化时才产生。

[8] 标志位。
	双方可设置
	----------
	6] REQ 请求标记。
	   设置本数据报为一个资源请求。
	   它将由服务端检索查询并返回响应，响应的数据报该位需清零。
	   即：如果没有该标记，数据报由请求相对应的接收器处理，而非资源检索接口。

	5] SES 会话创建/更新（Session）。
	   这是一个安全性机制，在对端初次请求连系时或一定时间间隔后发生。
	   初次连系时的会话创建由接收请求的一方设置。
	   不定时的会话更新请求可由任一端发起，包含「更新请求/确认/通告」3个步骤。
	   会话数据报不携带数据（可能更快传递）。
	   注：
	   会话数据报还负责设定下一个交互期初始数据ID的值（随机）。

	4] RST 重置/断开（Reset）。
	   通知对方重置发送或断开连系。
	   如果未携带合法的会话校验码，则有较低的优先级（可能是对端宕机重启）。
	   - 如果SES置位，表示全部重置，新建会话。通常无合法的会话校验码。
	   - 如果发送数据ID为0xffff，表示重置全部正在发送数据（已发送但未完成）。
	   - 如果发送数据ID为一个有效值，表示重置特定的数据发送。
	   注：
	   - 缺失会话校验码的重置请求可能是一个攻击。
	   - 如果依然继续接收到对方合法的数据发送或确认，则忽略该请求。

	3] BYE 主动断开（Bye!）。
	   友好地，双方可以主动说再见，以通知对方自己离开了，请自行善后。
	   源于保活机制的存在，这一消息无需等待对方确认（可连发两个Bye ^.^）。
	   注：
	   即便数据尚未传输完毕，对方也视为放弃连系（会话有效）。

	接收端设置
	----------
	2] RTP 请求重传（Retransmit Packet）。
	   请求对端发送某个具体的包。
	   确认号即为请求的目标数据包的序列号。
	   这通常在END包已收到但中间包缺失的情况下有用。它可以帮助迅速完成该数据体，从而有利于应用的并行处理。
	   或者在单独的小数据体传输中，因发送方无法获得足够的确认距离评估重发，由接收端超时后申请。
	   注：
	   - 未接收到END包即说明还有数据待发送。
	   - 接收端的超时通常很短：前2个包间隔的2-3倍（最短10-15ms）。
	   - 将重传主动权交给接收端似乎很合理：没收到就说一声嘛，你的ACK肯定是弄丢了^o^...

	发送方设置
	----------
	1] BEG 分组开始（Begin）。
	   标记数据体的第一个分组数据报。
	0] END 分组结束（End）。
	   标记数据体的最后一个数据报，即分组结束。
	   如果数据包较小而无需分组，则BEG和END会被同时设置。

(1) 确认距离（ACK distance）。
	接收端设置。
	当前收到的分组与进度线的序号差。1表示连续，2表示跳了1个包。
	理想情况下该值为1，但如果接收到多个跳跃包，则可能发送的丢包了。
	注：
	进度线是指连续无间隔的最后一个确认号，与传统的积累ACK不同。

(1) 发送距离（Send distance）。
	发送方设置。
	当前发送的分组序列号与进度线的距离。
	此也为发送方对接收端的进度通报，即对方发送的ACK已收到（对ACK确认的确认）。
	该值能表达初始RTT和ACK丢失状况。
	注：
	进度线是对「有序的数据体（首个分组）+自身有序分组」的确认。
	每个数据体进度的公共部分由其首个分组对应的「数据体序列位置点」决定。
	就像一条链上顺序悬挂了各个数据体分组，每条路径的公共部分叠加延长。
-----------------------------------------------------------------------
(4) 会话校验码（Session verify code）。
	用于两个端点的当前连系认证和数据校验。
	应用初始申请一个会话时，对端发送一个8字节随机值作为验证前缀。
	该验证前缀由双方保存，不再在网络上传输。
	之后的数据传输用一个固定的方式计算CRC32校验和，算法：
	CRC32(
		验证前缀 +
		数据ID #SND + 序列号 +
		数据ID #RCV + 确认号 +
		发送距离 + 确认距离 +
		数据
	)
	每一次的该值都会不一样，它既是对数据的校验，也是会话安全的认证。
	纯ACK确认时数据为空，但其它字段依然提供了可变性。
	注：
	- 这仅提供了简单的安全保护，主要用于防范基于网络传输的攻击。
	- CRC32仅对不超过64kb的数据报校验，更大的数据负载由上级应用自行负责。
-----------------------------------------------------------------------
(4) MTU 自定义大小（MTU Custom size）
    当MTU通告区域值为0xff时，指定的MTU大小。单位为字节。
	该字段可选（不常用）。
-----------------------------------------------------------------------
