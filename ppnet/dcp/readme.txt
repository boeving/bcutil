DCP 数据包控制协议
==================
基于UDP，完整的「一个数据」逻辑，类似文件（有边界）。主要用于端到端数据传输。
头部长度16+4字节，与UDP头部共计24-28字节。

目标
----
	1. 任意尺寸数据体。
	   数据报默认最大576字节分组发送，有效负载：576-20-24 = 532。
	2. 送达可靠性。
	   仅保证数据报送达，数据本身的可靠性自行负责。
	   注：应用通常采用哈希校验数据，并可能加密传输。
	3. 拥塞控制。
	   乱序间距回馈自适应，并行缓冲延迟确认。
	   基准速率：~4ms/包。


要点
----
小启动（～慢启动）
起始的数据报大小取最小值，然后依MTU通告进行调整。
起始的速度也稍微慢一些，之后权衡两个距离和时间调整速度。
注：
由距离和己方的发送速度可估算网络状况。
基本逻辑：
	1. 顺序并发。
	   不同的数据按请求的先后并行发送。
	   每个数据内部的分组按顺序有速率约束（权衡距离因子）地并发（不等待确认）。
	2. 乱序接收。
	   网络传输无法保证顺序，以乱序为设计基础。
	3. 乱序确认。
	   按适当的节奏确认，基本保持原接收的乱序。
	   参考确认距离发送重复确认（如果必要）。
	4. 有序重发。
	   权衡接收距离因子计算重发，序列号顺序依然决定优先性。


概念
----
与UDP相同，本协议中没有连接的概念，端点可以向任意目标端直接发送数据。
一对已经穿透并保持通信的端点称为一个「连系」，以与TCP的连接相区别。它们之间通常维持一个相同的会话ID。
注：「连接」在这里仅仅被视为物理网络的连接，因而也无时不在。


头部结构：
16字节 + 4字节可选（MTU通告值自定义）
	-----------------------------------------------------------------------
	数据标识：发送方设置
	--------------------
	(2) 数据ID。
		对一个完整数据的标识。
		类似于一个文件描述符，返回给应用层用于标记数据。
		多个数据传输并行工作，类似多文件请求。
	(2) 序列号。
		以分组的数据报为单位，而非字节数。
		初始发送时起始值随机，随后的分组按顺序递增，超值回绕。
		与数据ID一起工作，从不可靠的网络获取数据（类似一个网络文件系统）。
	-----------------------------------------------------------------------
	确认标识：接收方设置
	--------------------
	(2) 数据ID。
		含义同上，此为对发送方数据的确认，值为源数据ID。
	(2) 确认号。
		完整进度需要的下一个序列号（即传统的ACK含义）。
	-----------------------------------------------------------------------
	[4] 保留。
		可能为类似TCP的头部大小，暂时未用。
	[4] MTU 通告。
		告诉对端自己可以发送的最大包尺寸。
		确认时可设置更小的类型或保持0值，以声明自己的MSS能力（MTU&MSS二合一）。
		注：4位空间可支持14种标准通路，自定义大小由15标记。
		0) 默认最小值。也为起始小启动的值。
		   576 （x-44 = 532/IPv4，x-64 = 512/IPv6）
		   1280（x-64 = 1216/IPv6）
		1) 常用以太网通路。
		   1500（x-44 = 1456/IPv4，x-64 = 1436/IPv6）
		2) PPPoE链路。
		   1492（x-44 = 1448/IPv4，x-64 = 1428/IPv6）
		f) 超标指示。
		   由头部后4字节指定大小，常用于超高速传输。
		注记：
		MTU测试实现为一个独立的服务，每隔一段时间（10～20分钟）重复执行。
		外部简单调用取值即可。
		对于超高速网络，通常传输能力已知，无需测试，仅简单协商。
	[8] 标志位。
		接收方设置
		----------
		5] CWR	拥塞求减。
			通知发送方减速（即便窗口未满）。如接受端应用暂停。
		4] RST 	请求重置。
			通知发送方重置发送。
			这通常是在接收方当机重启后，丢失前阶的会话和数据标识时发生。

			如果不携带会话ID，这类似于重建一个会话，但拥有较低的优先级。
			否则是一个重新发送的请求，拥有高优先级。
			注：
			1. 如果收到无会话ID的该请求，但发送方依然继续接收到合法的ACK确认，
			   说明这是一个失误或攻击，会被简单忽略。
			2. 如果收到的请求包含合法会话ID，则立即重置发送。
		3] FIN  接收完毕。
			一个完整的数据接收完毕（收到END的ACK）。
		发送方设置
		----------
		2] SES	创建/更新会话请求。
			这是一个安全性措施，在初次联系或一定时间间隔后设置。
			之后由接收方在确认中设置新的会话ID。
			注：
			该确认数据报无原会话ID认证，仅依赖数据ID和序列号识别。
			更新仅存在于严格对应的确认数据报中（ACK值正确）。
		1] BEG  分组开始。
			发送方设置，标记第一个数据包分组。
		0] END  分组结束。
			发送方设置，数据分组结束（最后一个包）。
			接收者附加一个文件结束符，递送到应用。
			注：
			如果数据包较小而无需分组，则BEG和END会被同时设置。
	(1) 接收距离。
		接收方设置。
		当前收到的分组与进度线（ACK）的距离。如：1表示跳了1个包。
		接收方通常会微等待以优化ACK。如果接受到跳跃的包，则该值有意义。
		理想情况下该值为0，但如果接收到新的跳跃包，则可能再次发送ACK（重复）。
		该值对数据报丢失判断有参考意义。
	(1) 确认距离。
		发送方设置。
		当前发送的分组序列号与最新确认号的距离。
		此为发送方对接收方的进度通报，即对方发送的ACK已收到（对ACK确认的确认）。
		该值对ACK丢失而需接收方再次确认有意义。
	-----------------------------------------------------------------------
	(4) 会话ID。
		用于两个端点的当前连系标识。
		这是一个增强的安全措施，它与数据ID和序列号共同构成分组数据的合法性标识。
		注：
		数据ID和序列号组合标识仅提供了3字节的随机性（1字节范围包容）。
	-----------------------------------------------------------------------


API：
缺失的分组可能可以忽略（如视频），因此支持通过API跳过缺失的确认。
代码：
	// 忽略当前缺失的分组，跳至最近已接收后段分组（ACK更新）。
	// 返回跳过的分组数。
	func Ignore() int

	// 返回当前ACK与最近后段分组的距离。
	func Space() int
