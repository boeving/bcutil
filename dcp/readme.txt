DCP 数据包控制协议
==================
基于UDP，完整的「一个数据」逻辑，类似文件（有边界）。
主要用于端到端数据传输。

1. 任意尺寸数据体。
   数据报默认最大576字节分组发送，有效负载：576-20-20 = 536。
2. 送达可靠性。
   仅保证数据报送达，数据本身的可靠性可选CRC64校验。
3. 拥塞控制。
   乱序间距回馈自适应，并行缓冲延迟确认。
   基础速率：4ms。


头部结构：
（12字节）
	-----------------------------------------------------------------------
	数据标识：发送方设置
	--------------------
	(2) 数据ID。
		对一个完整的数据的标识。
		独立的初始发送时起始值随机（指整个发送池为空时）。
		在不同数据连续混杂发送时为顺序递增方式。

		混杂指前一个数据虽然发送完毕但并未全部确认，后一个数据已经开始发送。
		混杂状态下，连续的数据ID用于区分数据分组。
		这类似一种并行状态，数据确认以一种「缓冲」延迟完成（含重发/确认）。
	(2) 序列号。
		以分组数据报为单位，而非字节数。
		初始发送时起始值也随机，随后的分组按顺序递增，超值回绕。
		与数据ID一起，标识特定的数据分组。
	注：
		值 0xffffffff 有特殊含义，表示纯确认，无数据负载。
		通常在单方面接收数据时，发现确认距离较大（ACK丢失）而主动发出，
		阻止发送方超时重发。
		如果双方都有数据发送，则确认被携带在发送的数据报中。
	-----------------------------------------------------------------------
	确认标识：接收方设置
	--------------------
	(2) 数据ID。
		含义同上，此为对发送方数据的确认，值为源数据ID。
	(2) 确认号。
		完整进度需要的下一个序列号（即传统的ACK含义）。
	-----------------------------------------------------------------------
	(1) 保留。
	[8] 标志位。
		接收方设置
		----------
		5] FIN  接收完毕。
			一个完整的数据接收完毕（收到END的ACK）。
		4] CWR	拥塞求减。
			通知发送方减速（即便窗口未满）。如接受端应用暂停。
		3] CER 	数据校验出错。
			仅在CRC被设置时才有效，通知发送方数据有问题。
		发送方设置
		----------
		2] CRC 	包含CRC64校验。
			校验和数据紧跟在头部之后。校验的数据仅包含有效负载。
			注：此时数据报有效负载为：576-20-20-8 = 528
		1] BEG  分组开始。
			发送方设置，标记第一个数据包分组。
		0] END  分组结束。
			发送方设置，数据分组结束（最后一个包）。
			接收者附加一个文件结束符，递送到应用。
			注：
			如果数据包较小而无需分组，则BEG和END会被同时设置。
	(1) 当前距离。
		接收方设置。
		当前收到的分组与进度线（ACK）的距离。如：1表示跳了1个包。
		接收方通常会微等待以优化ACK。如果接受到跳跃的包，则该值有意义。
		理想情况下该值为0，但如果接收到新的跳跃包，则可能再次发送ACK（重复）。
		该值对数据报丢失判断有参考意义。
	(1) 确认距离。
		发送方设置。
		当前发送的分组序列号与最新确认号的距离。
		此为发送方对接收方的进度通报，即对方发送的ACK已收到（对ACK确认的确认）。
		该值对ACK丢失而需接收方再次确认有意义。
	-----------------------------------------------------------------------

	注记：
	为避免冗余浪费，取消校验和设计（依赖UDP的2字节校验和）。
	但提供可选的CRC64校验能力。更高精度的校验和由应用自行负责。


API：
缺失的分组可能可以忽略（如视频），因此支持通过API跳过缺失的确认。
代码：
	// 忽略当前缺失的分组，跳至最近已接收后段分组（ACK更新）。
	// 返回跳过的分组数。
	func Ignore() int

	// 返回当前ACK与最近后段分组的距离。
	func Space() int
