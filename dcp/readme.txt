DCP 数据控制协议
================
基于UDP，完整的「一个数据」逻辑，类似文件（有边界）。
主要用于端到端数据传输。

1. 任意尺寸的数据体。
2. 可靠性保证，拥塞控制。


头部结构：
（12字节）
	-----------------------------------------------------------------------
	(2) 序列号。
		发送方设置，以分组为单位（非字节数）。
		对于初始发送，起始值随机，随后的分组顺序递增（超值回绕）。
		注：
		完整的数据已经发送完毕，重新的启动发送也可视为初始发送。
		不同的数据体也可连续发送，但序列号也需连续，以避免混乱。
	(2) 确认号。
		接收方设置，完整进度需要的下一个序列号（ACK）。
	-----------------------------------------------------------------------
	[8] 保留
	[4] 标志位。
		3] FIN  传输完成。
			接收方设置，一个数据接收完毕（ACK->END）。
		2] CWR	拥塞求减。
			通知发送方减速（即便窗口未满）。如接受端应用暂停。
		1] BEG  分组开始。
			发送方设置，标记第一个数据包分组。
		0] END  分组结束。
			发送方设置，数据分组结束（最后一个包）。
			接收者附加一个文件结束符，递送到应用。
			注：
			如果数据包较小而无需分组，则BEG和END会被同时设置。
	[10] 当前距离。
		接收方设置。
		当前收到的分组与进度线（ACK）的距离。如：1表示跳了1个包。
		以分组（512|576）为单位，最大可支持约 512kb 或 576kb 的数据跨越。

		接收方通常会微等待以优化ACK。如果接受到跳跃的包，则设置该值。
		理想情况下该值为0，但如果接收到新的跨越包（ACK没变），则重复发送ACK并设置该值。
	[10] 确认距离。
		发送方设置。
		当前发送的分组序列号与最新确认号的距离。
		此为发送方对接收方的进度通报，即接收方发送的ACK已收到（对ACK确认的确认）。
	-----------------------------------------------------------------------
	(4)	校验和（CRC32）。
		注：
		如果该协议实现在传输层（同UDP），可取消当前UDP头部后4字节为补充，
		即采用CRC64校验，提高精度。
	-----------------------------------------------------------------------

	说明
	----
	距离字段设置为10位，最大包容1k数量的乱序分组。
	这个值可能有些大，当达到255个跨越时就应该停止后续发送了（可设置）。
	但更大的值为极度混乱拓扑的网络留下余地。


API：
缺失的分组可能可以忽略（如视频），因此支持通过API跳过缺失的确认。
代码：
	// 忽略当前缺失的分组，跳至最近已接收后段分组（ACK更新）。
	// 返回跳过的分组数。
	func Ignore() int

	// 返回当前ACK与最近后段分组的距离。
	func Space() int
